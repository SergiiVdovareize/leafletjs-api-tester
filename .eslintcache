[{"G:\\work\\leafletjs-api-tester\\.eslintrc.js":"1","G:\\work\\leafletjs-api-tester\\render.js":"2"},{"size":314,"mtime":1660161493659,"results":"3","hashOfConfig":"4"},{"size":2709,"mtime":1660161120795,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"9"},"1v6c0mo",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"13"},"G:\\work\\leafletjs-api-tester\\.eslintrc.js",["14"],[],"module.exports = {\r\n  env: {\r\n    browser: true,\r\n    es2021: true\r\n  },\r\n  extends: [\r\n    'standard'\r\n  ],\r\n  parserOptions: {\r\n    ecmaVersion: 'latest'\r\n  },\r\n  rules: {\r\n    semi: [2, 'always'],\r\n    'no-var': 'off',\r\n    'object-shorthand': 'off',\r\n  },\r\n  ignorePatterns: [\r\n    'webapp/leaflet/'\r\n  ]\r\n};\r\n","G:\\work\\leafletjs-api-tester\\render.js",["15","16","17","18"],[],"/* global phantom */\r\n\r\nconst page = require('webpage').create();\r\nconst args = require('system').args.slice(1);\r\nconst fs = require('fs');\r\nconst md5 = require('crypto-js/md5');\r\n\r\nconst baseUrl = 'file:///' + fs.workingDirectory + '/webapp/index.html';\r\nconst baseMapFolder = 'maps';\r\nconst nonUrlParams = ['size'];\r\n\r\nfunction parseParams () {\r\n  const paramsArray = args.filter(function (arg) {\r\n    return arg.indexOf('=') !== -1;\r\n  });\r\n\r\n  const parsedParams = {};\r\n  paramsArray.forEach(function (paramString) {\r\n    const keyValue = paramString.split('=');\r\n    parsedParams[keyValue[0]] = keyValue[1];\r\n  });\r\n\r\n  return parsedParams;\r\n}\r\n\r\nfunction composeUrlParams (params) {\r\n  const stringParams = Object.keys(params)\r\n    .filter(function (param) {\r\n      return nonUrlParams.indexOf(param) === -1;\r\n    }).map(function (param) {\r\n      return param + '=' + params[param];\r\n    });\r\n\r\n  return stringParams.join('&');\r\n}\r\n\r\nfunction encodeParams (params) {\r\n  const sortedKeys = Object.keys(params).sort(function (p1, p2) {\r\n    if (p1 < p2) {\r\n      return -1;\r\n    }\r\n    if (p2 < p1) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  var encodingString = '';\r\n  sortedKeys.forEach(function (key) {\r\n    encodingString += key + params[key];\r\n  });\r\n\r\n  return md5(encodingString);\r\n}\r\n\r\nfunction setViewportSize(parsedSize) {\r\n  var width = 1000;\r\n  var height = 1000;\r\n\r\n  if (parsedSize) {\r\n    const size = parsedSize.split(/,|x/);\r\n    if (!isNaN(size[0]) && !isNaN(size[1])) {\r\n      width = size[0];\r\n      height = size[1];\r\n    }\r\n  }\r\n\r\n  page.viewportSize = {\r\n    width: width,\r\n    height: height\r\n  };\r\n}\r\n\r\nfunction render(url, paramsHash) {\r\n  page.open(url, function (status) {\r\n    if (status !== 'success') {\r\n      console.log('unable to load the address', status);\r\n      phantom.exit();\r\n    } else {\r\n      const imageTarget = baseMapFolder + '/' + paramsHash + '.png';\r\n\r\n      if (fs.exists(imageTarget)) {\r\n        console.log('map already exists: ', imageTarget);\r\n        phantom.exit();\r\n      } else {\r\n        window.setTimeout(function () {\r\n          console.log('render map:', imageTarget);\r\n          page.render(imageTarget);\r\n          phantom.exit();\r\n        }, 1000);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nconst parsedParams = parseParams();\r\nconst paramsHash = encodeParams(parsedParams);\r\nconst urlParams = composeUrlParams(parsedParams);\r\nconst url = urlParams.length > 0 ? baseUrl + '?' + urlParams : baseUrl;\r\nsetViewportSize(parsedParams.size);\r\nconsole.log(url)\r\nrender(baseUrl, paramsHash);\r\n// render(baseUrl, 'bob');\r\n\r\n// phantomjs render.js target=49.566115,25.576170 position=49.551971,25.59374 pilot=49.554738,25.607933 zoom=10 size=1000,1000\r\n",{"ruleId":"19","severity":2,"message":"20","line":15,"column":30,"nodeType":"21","messageId":"22","endLine":15,"endColumn":31,"fix":"23"},{"ruleId":"24","severity":2,"message":"25","line":56,"column":25,"nodeType":"26","messageId":"27","endLine":56,"endColumn":26,"fix":"28"},{"ruleId":"24","severity":2,"message":"25","line":74,"column":16,"nodeType":"26","messageId":"27","endLine":74,"endColumn":17,"fix":"29"},{"ruleId":"30","severity":2,"message":"31","line":82,"column":11,"nodeType":"32","endLine":82,"endColumn":20},{"ruleId":"33","severity":2,"message":"34","line":101,"column":17,"nodeType":"35","messageId":"36","endLine":102,"endColumn":1,"fix":"37"},"comma-dangle","Unexpected trailing comma.","Property","unexpected",{"range":"38","text":"39"},"space-before-function-paren","Missing space before function parentheses.","FunctionDeclaration","missingSpace",{"range":"40","text":"41"},{"range":"42","text":"41"},"n/no-deprecated-api","'fs.exists' was deprecated since v4.0.0. Use 'fs.stat()' or 'fs.access()' instead.","MemberExpression","semi","Missing semicolon.","ExpressionStatement","missingSemi",{"range":"43","text":"44"},[247,258],"'off'\r\n  }",[1332,1332]," ",[1657,1657],[2519,2519],";"]